<?php
/**
 * @file
 *
 * Contains resque script to startup a drupal worker,
 * based on https://github.com/chrisboulton/php-resque/blob/master/bin/resque.
 */

define('DRUPAL_ROOT', getenv('DRUPAL_ROOT'));
define('DRUPAL_COMPOSER_ROOT', getenv('DRUPAL_COMPOSER_ROOT'));

// Bootstrap drupal.
require_once DRUPAL_ROOT . '/includes/bootstrap.inc';
$_SERVER['REMOTE_ADDR'] = '127.0.0.1';
$_SERVER['REQUEST_METHOD'] = 'GET';
$_SERVER['HTTP_USER_AGENT'] = 'RESQUE_WORKER';
chdir(DRUPAL_ROOT);
drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);

// Find and initialize Composer
if (file_exists(DRUPAL_COMPOSER_ROOT . '/vendor/autoload.php')) {
  require_once DRUPAL_COMPOSER_ROOT . '/vendor/autoload.php';
}

if (!class_exists('Composer\Autoload\ClassLoader', false)) {
  die(
    'You need to set up the project dependencies using the following commands:' . PHP_EOL .
    'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
    'php composer.phar install' . PHP_EOL
  );
}

$QUEUE = getenv('QUEUE');
if(empty($QUEUE)) {
  die("Set QUEUE env var containing the list of queues to work.\n");
}

$redis_host = variable_get('redis_host', 'localhost');
$redis_port = variable_get('redis_port', '6379');
$redis_password = variable_get('redis_password', NULL);

// Required if redis has a password, and/or on another server.
if (!empty($redis_password)) {
  Resque::setBackend('redis://redis:' . $redis_password . '@' . $redis_host . ':' . $redis_port);
}
else {
  Resque::setBackend($redis_host . ':' . $redis_port);
}

$interval = 5;
$INTERVAL = getenv('INTERVAL');
if(!empty($INTERVAL)) {
  $interval = $INTERVAL;
}
$BLOCKING = getenv('BLOCKING') !== FALSE;

$PREFIX = getenv('PREFIX');
if(!empty($PREFIX)) {
  Resque_Redis::prefix($PREFIX);
}

// Start a single worker
$queues = explode(',', $QUEUE);

// Listen for unique queues so that we can remove the queue once the job processes.
Resque_Event::listen('afterPerform', array('ResqueUniquePlugin', 'afterPerform'));
Resque_Event::listen('onFailure', array('ResqueUniquePlugin', 'onFailure'));
$worker = new Resque_Worker($queues);

$PIDFILE = getenv('PIDFILE');
if ($PIDFILE) {
  file_put_contents($PIDFILE, getmypid()) or
  die('Could not write PID information to ' . $PIDFILE);
}

$worker->work($interval, $BLOCKING);
