<?php

/**
 * @file
 * Main module file for Resque Drupal Queue.
 */

/**
 * Implements hook_help().
 */
function drupal_resque_help($path, $arg) {
  switch ($path) {
    case 'admin/help#drupal_resque':
      return '<p>' . t('Flexible way to define queue items with php resque.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function drupal_resque_menu() {
  return array(
    'admin/settings/drupal_resque' => array(
      'title' => 'Drupal Resque',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drupal_resque_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'drupal_resque.admin.inc',
    )
  );
}

/**
 * Queue item in resque manager.
 *
 * @param string $name
 *   Name of the queue process to queue.
 * @param array $variables
 *   Array of variables needed for the queue process.
 *
 * @return array
 *   Token returned from Resque to track job.
 */
function drupal_resque_queue($name, $variables = array()) {
  $redis_host = variable_get('redis_host', 'localhost');
  $redis_port = variable_get('redis_port', '6379');
  $redis_password = variable_get('redis_password', NULL);

  // Required if redis has a password, and/or on another server.
  if (!empty($redis_password)) {
    Resque::setBackend('redis://redis:' . $redis_password . '@' . $redis_host . ':' . $redis_port);
  }
  else {
    Resque::setBackend($redis_host . ':' . $redis_port);
  }
  try {
    $token = Resque::enqueue($name, $name, $variables, TRUE);
  }
  catch (Exception $e) {
    return $e;
  }

  return array('token' => $token);
}

/**
 * Add a listener to your resque jobs.
 *
 * @param string $event_type
 *   The event type to listen to. (afterEnqueue, onFailure, etc..)
 * @param string $class
 *   The class where the listener method lives.
 * @param string $method
 *   The name of the listener method.
 */
function drupal_resque_add_listener($event_type, $class, $method) {
  Resque_Event::listen($event_type, array($class, $method));
}